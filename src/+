use std::collections::HashMap;
use std::fmt;

#[derive(PartialEq, Eq, Hash)]
enum MemberTypes {
    INT,
    FLOAT,
    STRING,
}

#[derive(PartialEq, Eq, Hash)]
struct Member {
    pub name: String,
    pub member_type: MemberTypes,
}

struct Object {
    pub name: String,
    pub members: HashMap<String, Member>,
}

struct DataBase {
    pub name: String,
    pub objects: HashMap<String, Object>,
}

impl fmt::Display for MemberTypes {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Self::FLOAT => write!(f, "float"),
            Self::INT => write!(f, "int"),
            Self::STRING => write!(f, "string"),
        }
    }
}

impl Member {
    fn new(&self, n: String, mt: MemberTypes) -> Self {
        Member {
            name: n,
            member_type: mt,
        }
    }
}

impl Object {
    fn new(&self, n: String) -> Self {
        Object {
            name: n,
            members: None,
        }
    }

    fn print_members(&self) {
        for (key, value) in self.members.iter() {
            println!("{}: {}", key, value.member_type);
        }
    }

    fn add_member(&self, m: Member) {}
}

impl DataBase {
    fn new(&self, n: String) -> Self {
        DataBase {
            name: n,
            objects: None,
        }
    }
}
